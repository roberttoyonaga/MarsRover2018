// Generated by gencpp from file occupancy_grid/OccupancyGrid.msg
// DO NOT EDIT!


#ifndef OCCUPANCY_GRID_MESSAGE_OCCUPANCYGRID_H
#define OCCUPANCY_GRID_MESSAGE_OCCUPANCYGRID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <occupancy_grid/OccupancyGridHeader.h>
#include <occupancy_grid/GridDataDimension.h>

namespace occupancy_grid
{
template <class ContainerAllocator>
struct OccupancyGrid_
{
  typedef OccupancyGrid_<ContainerAllocator> Type;

  OccupancyGrid_()
    : header()
    , dataDimension()
    , data()  {
    }
  OccupancyGrid_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , dataDimension(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::occupancy_grid::GridDataDimension_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::occupancy_grid::GridDataDimension_<ContainerAllocator> >::other >  _dataDimension_type;
  _dataDimension_type dataDimension;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _data_type;
  _data_type data;




  typedef boost::shared_ptr< ::occupancy_grid::OccupancyGrid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::occupancy_grid::OccupancyGrid_<ContainerAllocator> const> ConstPtr;

}; // struct OccupancyGrid_

typedef ::occupancy_grid::OccupancyGrid_<std::allocator<void> > OccupancyGrid;

typedef boost::shared_ptr< ::occupancy_grid::OccupancyGrid > OccupancyGridPtr;
typedef boost::shared_ptr< ::occupancy_grid::OccupancyGrid const> OccupancyGridConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::occupancy_grid::OccupancyGrid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::occupancy_grid::OccupancyGrid_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace occupancy_grid

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'occupancy_grid': ['/home/wmmc/MarsRover2018/Workspace/src/occupancy_grid/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::occupancy_grid::OccupancyGrid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::occupancy_grid::OccupancyGrid_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::occupancy_grid::OccupancyGrid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::occupancy_grid::OccupancyGrid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::occupancy_grid::OccupancyGrid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::occupancy_grid::OccupancyGrid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::occupancy_grid::OccupancyGrid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce7444edcba848b954358db865f7fab7";
  }

  static const char* value(const ::occupancy_grid::OccupancyGrid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce7444edcba848b9ULL;
  static const uint64_t static_value2 = 0x54358db865f7fab7ULL;
};

template<class ContainerAllocator>
struct DataType< ::occupancy_grid::OccupancyGrid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "occupancy_grid/OccupancyGrid";
  }

  static const char* value(const ::occupancy_grid::OccupancyGrid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::occupancy_grid::OccupancyGrid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "OccupancyGridHeader header\n\
\n\
GridDataDimension[] dataDimension\n\
float32[] data\n\
\n\
================================================================================\n\
MSG: occupancy_grid/OccupancyGridHeader\n\
#Camera Info\n\
uint32 cameraZMax\n\
uint32 cameraXMax\n\
float32 cameraYOffset\n\
\n\
#Occupancy Grid Info\n\
float32 gridResolution\n\
uint32 gridCameraZ\n\
uint32 gridCameraX\n\
\n\
\n\
================================================================================\n\
MSG: occupancy_grid/GridDataDimension\n\
string label\n\
uint32 size\n\
uint32 stride\n\
";
  }

  static const char* value(const ::occupancy_grid::OccupancyGrid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::occupancy_grid::OccupancyGrid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.dataDimension);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OccupancyGrid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::occupancy_grid::OccupancyGrid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::occupancy_grid::OccupancyGrid_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "dataDimension[]" << std::endl;
    for (size_t i = 0; i < v.dataDimension.size(); ++i)
    {
      s << indent << "  dataDimension[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::occupancy_grid::GridDataDimension_<ContainerAllocator> >::stream(s, indent + "    ", v.dataDimension[i]);
    }
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCCUPANCY_GRID_MESSAGE_OCCUPANCYGRID_H

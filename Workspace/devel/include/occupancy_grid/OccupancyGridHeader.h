// Generated by gencpp from file occupancy_grid/OccupancyGridHeader.msg
// DO NOT EDIT!


#ifndef OCCUPANCY_GRID_MESSAGE_OCCUPANCYGRIDHEADER_H
#define OCCUPANCY_GRID_MESSAGE_OCCUPANCYGRIDHEADER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace occupancy_grid
{
template <class ContainerAllocator>
struct OccupancyGridHeader_
{
  typedef OccupancyGridHeader_<ContainerAllocator> Type;

  OccupancyGridHeader_()
    : cameraZMax(0)
    , cameraXMax(0)
    , cameraYOffset(0.0)
    , gridResolution(0.0)
    , gridCameraZ(0)
    , gridCameraX(0)  {
    }
  OccupancyGridHeader_(const ContainerAllocator& _alloc)
    : cameraZMax(0)
    , cameraXMax(0)
    , cameraYOffset(0.0)
    , gridResolution(0.0)
    , gridCameraZ(0)
    , gridCameraX(0)  {
  (void)_alloc;
    }



   typedef uint32_t _cameraZMax_type;
  _cameraZMax_type cameraZMax;

   typedef uint32_t _cameraXMax_type;
  _cameraXMax_type cameraXMax;

   typedef float _cameraYOffset_type;
  _cameraYOffset_type cameraYOffset;

   typedef float _gridResolution_type;
  _gridResolution_type gridResolution;

   typedef uint32_t _gridCameraZ_type;
  _gridCameraZ_type gridCameraZ;

   typedef uint32_t _gridCameraX_type;
  _gridCameraX_type gridCameraX;




  typedef boost::shared_ptr< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> const> ConstPtr;

}; // struct OccupancyGridHeader_

typedef ::occupancy_grid::OccupancyGridHeader_<std::allocator<void> > OccupancyGridHeader;

typedef boost::shared_ptr< ::occupancy_grid::OccupancyGridHeader > OccupancyGridHeaderPtr;
typedef boost::shared_ptr< ::occupancy_grid::OccupancyGridHeader const> OccupancyGridHeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace occupancy_grid

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'occupancy_grid': ['/home/wmmc/MarsRover2018/Workspace/src/occupancy_grid/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f8b35825f257a4716d746612ebebd87";
  }

  static const char* value(const ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f8b35825f257a47ULL;
  static const uint64_t static_value2 = 0x16d746612ebebd87ULL;
};

template<class ContainerAllocator>
struct DataType< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "occupancy_grid/OccupancyGridHeader";
  }

  static const char* value(const ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Camera Info\n\
uint32 cameraZMax\n\
uint32 cameraXMax\n\
float32 cameraYOffset\n\
\n\
#Occupancy Grid Info\n\
float32 gridResolution\n\
uint32 gridCameraZ\n\
uint32 gridCameraX\n\
\n\
";
  }

  static const char* value(const ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cameraZMax);
      stream.next(m.cameraXMax);
      stream.next(m.cameraYOffset);
      stream.next(m.gridResolution);
      stream.next(m.gridCameraZ);
      stream.next(m.gridCameraX);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OccupancyGridHeader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::occupancy_grid::OccupancyGridHeader_<ContainerAllocator>& v)
  {
    s << indent << "cameraZMax: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cameraZMax);
    s << indent << "cameraXMax: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cameraXMax);
    s << indent << "cameraYOffset: ";
    Printer<float>::stream(s, indent + "  ", v.cameraYOffset);
    s << indent << "gridResolution: ";
    Printer<float>::stream(s, indent + "  ", v.gridResolution);
    s << indent << "gridCameraZ: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gridCameraZ);
    s << indent << "gridCameraX: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gridCameraX);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCCUPANCY_GRID_MESSAGE_OCCUPANCYGRIDHEADER_H

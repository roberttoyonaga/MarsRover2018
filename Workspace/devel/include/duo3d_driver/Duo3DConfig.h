//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the duo3d_driver package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __duo3d_driver__DUO3DCONFIG_H__
#define __duo3d_driver__DUO3DCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace duo3d_driver
{
  class Duo3DConfigStatics;
  
  class Duo3DConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(Duo3DConfig &config, const Duo3DConfig &max, const Duo3DConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const Duo3DConfig &config1, const Duo3DConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, Duo3DConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const Duo3DConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, Duo3DConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const Duo3DConfig &config) const = 0;
      virtual void getValue(const Duo3DConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, 
          std::string a_description, std::string a_edit_method, T Duo3DConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (Duo3DConfig::* field);

      virtual void clamp(Duo3DConfig &config, const Duo3DConfig &max, const Duo3DConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const Duo3DConfig &config1, const Duo3DConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, Duo3DConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const Duo3DConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, Duo3DConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const Duo3DConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const Duo3DConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, Duo3DConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, Duo3DConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<Duo3DConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(Duo3DConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("gain"==(*_i)->name){gain = boost::any_cast<double>(val);}
        if("exposure"==(*_i)->name){exposure = boost::any_cast<double>(val);}
        if("auto_exposure"==(*_i)->name){auto_exposure = boost::any_cast<bool>(val);}
        if("camera_swap"==(*_i)->name){camera_swap = boost::any_cast<bool>(val);}
        if("horizontal_flip"==(*_i)->name){horizontal_flip = boost::any_cast<bool>(val);}
        if("vertical_flip"==(*_i)->name){vertical_flip = boost::any_cast<bool>(val);}
        if("led"==(*_i)->name){led = boost::any_cast<double>(val);}
        if("accel_range"==(*_i)->name){accel_range = boost::any_cast<int>(val);}
        if("gyro_range"==(*_i)->name){gyro_range = boost::any_cast<int>(val);}
        if("imu_rate"==(*_i)->name){imu_rate = boost::any_cast<double>(val);}
        if("processing_mode"==(*_i)->name){processing_mode = boost::any_cast<int>(val);}
        if("image_scale"==(*_i)->name){image_scale = boost::any_cast<int>(val);}
        if("pre_filter_cap"==(*_i)->name){pre_filter_cap = boost::any_cast<int>(val);}
        if("num_disparities"==(*_i)->name){num_disparities = boost::any_cast<int>(val);}
        if("sad_window_size"==(*_i)->name){sad_window_size = boost::any_cast<int>(val);}
        if("uniqueness_ratio"==(*_i)->name){uniqueness_ratio = boost::any_cast<int>(val);}
        if("speckle_window_size"==(*_i)->name){speckle_window_size = boost::any_cast<int>(val);}
        if("speckle_range"==(*_i)->name){speckle_range = boost::any_cast<int>(val);}
      }
    }

    double gain;
double exposure;
bool auto_exposure;
bool camera_swap;
bool horizontal_flip;
bool vertical_flip;
double led;
int accel_range;
int gyro_range;
double imu_rate;
int processing_mode;
int image_scale;
int pre_filter_cap;
int num_disparities;
int sad_window_size;
int uniqueness_ratio;
int speckle_window_size;
int speckle_range;

    bool state;
    std::string name;

    
}groups;



//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double gain;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double exposure;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool auto_exposure;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool camera_swap;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool horizontal_flip;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool vertical_flip;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double led;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int accel_range;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int gyro_range;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double imu_rate;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int processing_mode;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int image_scale;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int pre_filter_cap;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int num_disparities;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int sad_window_size;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int uniqueness_ratio;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int speckle_window_size;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int speckle_range;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("Duo3DConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const Duo3DConfig &__max__ = __getMax__();
      const Duo3DConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const Duo3DConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const Duo3DConfig &__getDefault__();
    static const Duo3DConfig &__getMax__();
    static const Duo3DConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const Duo3DConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void Duo3DConfig::ParamDescription<std::string>::clamp(Duo3DConfig &config, const Duo3DConfig &max, const Duo3DConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class Duo3DConfigStatics
  {
    friend class Duo3DConfig;
    
    Duo3DConfigStatics()
    {
Duo3DConfig::GroupDescription<Duo3DConfig::DEFAULT, Duo3DConfig> Default("Default", "", 0, 0, true, &Duo3DConfig::groups);
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain = 100.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<double>("gain", "double", 0, "Image gain value", "", &Duo3DConfig::gain)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<double>("gain", "double", 0, "Image gain value", "", &Duo3DConfig::gain)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure = 100.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure = 50.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<double>("exposure", "double", 0, "Image exposure value", "", &Duo3DConfig::exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<double>("exposure", "double", 0, "Image exposure value", "", &Duo3DConfig::exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_exposure = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_exposure = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_exposure = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<bool>("auto_exposure", "bool", 0, "Image auto exposure value", "", &Duo3DConfig::auto_exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<bool>("auto_exposure", "bool", 0, "Image auto exposure value", "", &Duo3DConfig::auto_exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.camera_swap = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.camera_swap = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.camera_swap = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<bool>("camera_swap", "bool", 0, "Image swap", "", &Duo3DConfig::camera_swap)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<bool>("camera_swap", "bool", 0, "Image swap", "", &Duo3DConfig::camera_swap)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.horizontal_flip = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.horizontal_flip = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.horizontal_flip = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<bool>("horizontal_flip", "bool", 0, "Horizontally image flip", "", &Duo3DConfig::horizontal_flip)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<bool>("horizontal_flip", "bool", 0, "Horizontally image flip", "", &Duo3DConfig::horizontal_flip)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.vertical_flip = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.vertical_flip = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.vertical_flip = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<bool>("vertical_flip", "bool", 0, "Vertically image flip", "", &Duo3DConfig::vertical_flip)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<bool>("vertical_flip", "bool", 0, "Vertically image flip", "", &Duo3DConfig::vertical_flip)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.led = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.led = 100.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.led = 10.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<double>("led", "double", 0, "LED brightness value", "", &Duo3DConfig::led)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<double>("led", "double", 0, "LED brightness value", "", &Duo3DConfig::led)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.accel_range = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.accel_range = 3;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.accel_range = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("accel_range", "int", 0, "Accelerometer Range", "{'enum_description': 'Enum to set Accelerometer Range', 'enum': [{'srcline': 17, 'description': 'Accelerometer full scale range +/- 2g', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': '2g'}, {'srcline': 18, 'description': 'Accelerometer full scale range +/- 4g', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': '4g'}, {'srcline': 19, 'description': 'Accelerometer full scale range +/- 8g', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': '8g'}, {'srcline': 20, 'description': 'Accelerometer full scale range +/- 16g', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': '16g'}]}", &Duo3DConfig::accel_range)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("accel_range", "int", 0, "Accelerometer Range", "{'enum_description': 'Enum to set Accelerometer Range', 'enum': [{'srcline': 17, 'description': 'Accelerometer full scale range +/- 2g', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': '2g'}, {'srcline': 18, 'description': 'Accelerometer full scale range +/- 4g', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': '4g'}, {'srcline': 19, 'description': 'Accelerometer full scale range +/- 8g', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': '8g'}, {'srcline': 20, 'description': 'Accelerometer full scale range +/- 16g', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': '16g'}]}", &Duo3DConfig::accel_range)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gyro_range = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gyro_range = 3;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gyro_range = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("gyro_range", "int", 0, "Gyroscope Range", "{'enum_description': 'Enum to set Gyroscope Range', 'enum': [{'srcline': 23, 'description': 'Gyroscope full scale range 250 deg/s', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': '250deg_s'}, {'srcline': 24, 'description': 'Gyroscope full scale range 500 deg/s', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': '500deg_s'}, {'srcline': 25, 'description': 'Gyroscope full scale range 1000 deg/s', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': '1000deg_s'}, {'srcline': 26, 'description': 'Gyroscope full scale range 2000 deg/s', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': '2000deg_s'}]}", &Duo3DConfig::gyro_range)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("gyro_range", "int", 0, "Gyroscope Range", "{'enum_description': 'Enum to set Gyroscope Range', 'enum': [{'srcline': 23, 'description': 'Gyroscope full scale range 250 deg/s', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': '250deg_s'}, {'srcline': 24, 'description': 'Gyroscope full scale range 500 deg/s', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': '500deg_s'}, {'srcline': 25, 'description': 'Gyroscope full scale range 1000 deg/s', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': '1000deg_s'}, {'srcline': 26, 'description': 'Gyroscope full scale range 2000 deg/s', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': '2000deg_s'}]}", &Duo3DConfig::gyro_range)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.imu_rate = 50.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.imu_rate = 500.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.imu_rate = 100.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<double>("imu_rate", "double", 0, "IMU Sampling Rate", "", &Duo3DConfig::imu_rate)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<double>("imu_rate", "double", 0, "IMU Sampling Rate", "", &Duo3DConfig::imu_rate)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.processing_mode = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.processing_mode = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.processing_mode = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("processing_mode", "int", 0, "Processing Mode", "{'enum_description': 'Enum to set Processing Mode', 'enum': [{'srcline': 33, 'description': 'Block Matching', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'BM'}, {'srcline': 34, 'description': 'Semiglobal Matching', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SGBM'}]}", &Duo3DConfig::processing_mode)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("processing_mode", "int", 0, "Processing Mode", "{'enum_description': 'Enum to set Processing Mode', 'enum': [{'srcline': 33, 'description': 'Block Matching', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'BM'}, {'srcline': 34, 'description': 'Semiglobal Matching', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SGBM'}]}", &Duo3DConfig::processing_mode)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_scale = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_scale = 3;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_scale = 3;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("image_scale", "int", 0, "Image Scaling Mode", "{'enum_description': 'Enum to set Image Scaling Mode', 'enum': [{'srcline': 37, 'description': 'No Image Scaling', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'NoScaling'}, {'srcline': 38, 'description': 'Scale along X', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'ScaleX'}, {'srcline': 39, 'description': 'Scale along Y', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'ScaleY'}, {'srcline': 40, 'description': 'Scale along X & Y', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'ScaleXY'}]}", &Duo3DConfig::image_scale)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("image_scale", "int", 0, "Image Scaling Mode", "{'enum_description': 'Enum to set Image Scaling Mode', 'enum': [{'srcline': 37, 'description': 'No Image Scaling', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'NoScaling'}, {'srcline': 38, 'description': 'Scale along X', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'ScaleX'}, {'srcline': 39, 'description': 'Scale along Y', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'ScaleY'}, {'srcline': 40, 'description': 'Scale along X & Y', 'srcfile': '/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'ScaleXY'}]}", &Duo3DConfig::image_scale)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pre_filter_cap = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pre_filter_cap = 63;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pre_filter_cap = 28;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("pre_filter_cap", "int", 0, "Pre-filter cap (dense3D)", "", &Duo3DConfig::pre_filter_cap)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("pre_filter_cap", "int", 0, "Pre-filter cap (dense3D)", "", &Duo3DConfig::pre_filter_cap)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.num_disparities = 2;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.num_disparities = 16;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.num_disparities = 4;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("num_disparities", "int", 0, "Number of disparities (dense3D)", "", &Duo3DConfig::num_disparities)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("num_disparities", "int", 0, "Number of disparities (dense3D)", "", &Duo3DConfig::num_disparities)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sad_window_size = 2;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sad_window_size = 10;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sad_window_size = 6;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("sad_window_size", "int", 0, "SAD Window Size (dense3D)", "", &Duo3DConfig::sad_window_size)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("sad_window_size", "int", 0, "SAD Window Size (dense3D)", "", &Duo3DConfig::sad_window_size)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.uniqueness_ratio = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.uniqueness_ratio = 100;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.uniqueness_ratio = 27;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("uniqueness_ratio", "int", 0, "Uniqueness Ratio (dense3D)", "", &Duo3DConfig::uniqueness_ratio)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("uniqueness_ratio", "int", 0, "Uniqueness Ratio (dense3D)", "", &Duo3DConfig::uniqueness_ratio)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.speckle_window_size = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.speckle_window_size = 256;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.speckle_window_size = 52;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("speckle_window_size", "int", 0, "Speckle Window Size (dense3D)", "", &Duo3DConfig::speckle_window_size)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("speckle_window_size", "int", 0, "Speckle Window Size (dense3D)", "", &Duo3DConfig::speckle_window_size)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.speckle_range = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.speckle_range = 32;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.speckle_range = 14;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("speckle_range", "int", 0, "Speckle Range (dense3D)", "", &Duo3DConfig::speckle_range)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Duo3DConfig::AbstractParamDescriptionConstPtr(new Duo3DConfig::ParamDescription<int>("speckle_range", "int", 0, "Speckle Range (dense3D)", "", &Duo3DConfig::speckle_range)));
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(Duo3DConfig::AbstractGroupDescriptionConstPtr(new Duo3DConfig::GroupDescription<Duo3DConfig::DEFAULT, Duo3DConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<Duo3DConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<Duo3DConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<Duo3DConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    Duo3DConfig __max__;
    Duo3DConfig __min__;
    Duo3DConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const Duo3DConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static Duo3DConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &Duo3DConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const Duo3DConfig &Duo3DConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const Duo3DConfig &Duo3DConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const Duo3DConfig &Duo3DConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<Duo3DConfig::AbstractParamDescriptionConstPtr> &Duo3DConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<Duo3DConfig::AbstractGroupDescriptionConstPtr> &Duo3DConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const Duo3DConfigStatics *Duo3DConfig::__get_statics__()
  {
    const static Duo3DConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = Duo3DConfigStatics::get_instance();
    
    return statics;
  }

//#line 17 "/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg"
      const int Duo3D_2g = 0;
//#line 18 "/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg"
      const int Duo3D_4g = 1;
//#line 19 "/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg"
      const int Duo3D_8g = 2;
//#line 20 "/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg"
      const int Duo3D_16g = 3;
//#line 23 "/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg"
      const int Duo3D_250deg_s = 0;
//#line 24 "/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg"
      const int Duo3D_500deg_s = 1;
//#line 25 "/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg"
      const int Duo3D_1000deg_s = 2;
//#line 26 "/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg"
      const int Duo3D_2000deg_s = 3;
//#line 33 "/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg"
      const int Duo3D_BM = 0;
//#line 34 "/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg"
      const int Duo3D_SGBM = 1;
//#line 37 "/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg"
      const int Duo3D_NoScaling = 0;
//#line 38 "/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg"
      const int Duo3D_ScaleX = 1;
//#line 39 "/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg"
      const int Duo3D_ScaleY = 2;
//#line 40 "/home/wmmc/MarsRover2018/Workspace/src/duo3d_driver/cfg/Duo3D.cfg"
      const int Duo3D_ScaleXY = 3;
}

#endif // __DUO3DRECONFIGURATOR_H__
